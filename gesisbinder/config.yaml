binderhub:
  resources:
    requests:
      cpu: "0.25"
      memory: 1Gi
    limits:
      cpu: "2"
      memory: 2Gi

  extraVolumes:
    - name: secrets
      secret:
        secretName: events-archiver-secrets
  extraVolumeMounts:
    - name: secrets
      mountPath: /secrets
      readOnly: true
  extraEnv:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /secrets/service-account.json

  config:
    BinderHub:
      hub_url: https://notebooks.gesis.org/binder/jupyter/
      image_prefix: gesiscss/orc-binder-
      appendix: |
        USER root
        ENV BINDER_URL={binder_url}
        ENV REPO_URL={repo_url}
        RUN cd /tmp \
         && wget -q https://github.com/gesiscss/orc/archive/master.tar.gz -O orc.tar.gz \
         && tar --wildcards -xzf orc.tar.gz --strip 2 */gesisbinder/appendix\
         && ./appendix/run-appendix \
         && rm -rf orc.tar.gz appendix
        USER $NB_USER

  extraConfig:
    # send binder events to mybinder.org's StackDriver on Google Cloud
    010-eventlog: |
      import google.cloud.logging
      import google.cloud.logging.handlers
      # importing google cloud configures a root log handler,
      # which prevents tornado's pretty-logging
      import logging
      logging.getLogger().handlers = []

      class JSONCloudLoggingHandler(google.cloud.logging.handlers.CloudLoggingHandler):
          def emit(self, record):
              record.name = None
              super().emit(record)

      def _make_eventsink_handler(el):
          client = google.cloud.logging.Client()
          # These events are not parsed as JSON in stackdriver, so give it a different name
          # for now. Should be fixed in https://github.com/googleapis/google-cloud-python/pull/6293
          return [JSONCloudLoggingHandler(client, name='binderhub-events-text')]
      c.EventLog.handlers_maker = _make_eventsink_handler
    020-templates: |
      staging = False
      production = True

  service:
    annotations:
      prometheus.io/path: '/binder/metrics'
    nodePort: 30081

  jupyterhub:
    hub:
      resources:
        requests:
          cpu: "0.25"
          memory: 1Gi
        limits:
          cpu: "2"
          memory: 2Gi
       # below is already default of z2jh chart
      #service:
      #  annotations:
      #    prometheus.io/scrape: 'true'
      #    prometheus.io/path: '/binder/jupyter/hub/metrics'

    proxy:
      service:
        nodePorts:
          http: 30082
      chp:
        resources:
          requests:
            cpu: "0.1"
            memory: 256Mi
          limits:
            cpu: "0.5"
            memory: 512Mi

    singleuser:
      cpu:
        guarantee: 0.1
        limit: 2
      memory:
        guarantee: 1G
        limit: 8G
