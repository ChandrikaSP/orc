nodeSelector:
  staging: worker

config:
  BinderHub:
    debug: true
    base_url: /binder/
    hub_url: https://notebooks-test.gesis.org/binder/jupyter/

    use_registry: true
    image_prefix: gesiscss/orc-binder-staging-
    build_image: jupyter/repo2docker:5cdd0ee
    per_repo_quota: 100
    build_node_selector:
      user: workers
    appendix: |
      USER root
      ENV BINDER_URL={binder_url}
      ENV REPO_URL={repo_url}
      RUN cd /tmp \
       && wget -q https://github.com/gesiscss/orc/archive/staging.tar.gz -O orc.tar.gz \
       && tar --wildcards -xzf orc.tar.gz --strip 2 */binderhub/appendix\
       && ./appendix/run-appendix \
       && rm -rf orc.tar.gz appendix
      USER $NB_USER

    template_variables:
      is_staging: True
      is_production: False
    template_path: /etc/binderhub/templates/binderhub/templates
    #extra_static_path: /etc/binderhub/templates/binderhub/static
    #extra_static_url_prefix: extra_static/

resources:
  requests:
    cpu: "0.25"
    memory: 512Mi
  limits:
    cpu: "0.5"
    memory: 512Mi

service:
  annotations:
    prometheus.io/scrape: 'false'
  type: NodePort
  nodePort: 30181

dind:
  enabled: false

imageCleaner:
  enabled: false

initContainers:
  - name: git-clone-templates
    image: alpine/git
    args:
      - clone
      - --single-branch
      - --branch=staging
      - --depth=1
      - --
      - https://github.com/gesiscss/orc.git
      - /etc/binderhub/templates
    securityContext:
      runAsUser: 0
    volumeMounts:
      - name: custom-templates
        mountPath: /etc/binderhub/templates
extraVolumes:
  - name: custom-templates
    emptyDir: {}
extraVolumeMounts:
  - name: custom-templates
    mountPath: /etc/binderhub/templates

cors: &cors
  allowOrigin: "*"

jupyterhub:
  custom:
    cors: *cors
  debug:
    enabled: true
  hub:
    baseUrl: /binder/jupyter/
    nodeSelector:
      staging: worker
    annotations:
      prometheus.io/scrape: 'false'
    deploymentStrategy:
      type: RollingUpdate
    db:
      type: postgres
    resources:
      requests:
        cpu: "0.25"
        memory: 512Mi
      limits:
        cpu: "0.5"
        memory: 512Mi
    extraConfig:
      neverRestart: |
        c.KubeSpawner.extra_pod_config.update({'restart_policy': 'Never'})

  proxy:
    nodeSelector:
      staging: worker
    https:
      enabled: false
    service:
      type: NodePort
      nodePorts:
        http: 30182
    chp:
      resources:
        requests:
          cpu: "0.25"
          memory: 512Mi
        limits:
          cpu: "0.5"
          memory: 512Mi

  singleuser:
    cpu:
      guarantee: 0.1
      limit: 0.5
    memory:
      guarantee: 512M
      limit: 512M
    nodeSelector:
      user: workers

  cull:
    # cull every 11 minutes so it is out of phase
    # with the proxy check-routes interval of five minutes
    every: 660
    timeout: 600
    # maxAge is 6 hours: 6 * 3600 = 21600
    maxAge: 21600
