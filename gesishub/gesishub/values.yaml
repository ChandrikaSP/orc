etcJupyter:
  jupyter_notebook_config.json:
    NotebookApp:
      allow_origin: '*'
      tornado_settings:
        trust_xheaders: true
      # shutdown the server after no activity
      shutdown_no_activity_timeout: 1800

    # if a user leaves a notebook with a running kernel,
    # the effective idle timeout will typically be CULL_TIMEOUT + CULL_KERNEL_TIMEOUT
    # as culling the kernel will register activity,
    # resetting the no_activity timer for the server as a whole
    MappingKernelManager:
      # shutdown kernels after no activity
      cull_idle_timeout: 600
      # check for idle kernels this often
      cull_interval: 60
      # a kernel with open connections but no activity still counts as idle
      # this is what allows us to shutdown servers
      # when people leave a notebook open and wander off
      cull_connected: true

jupyterhub:
  hub:
    # NOTE: because postgres db is on that node
    nodeSelector:
      production: worker
    image:
      name: gesiscss/k8s-hub-orc
      tag: "a8ab5e2"
    deploymentStrategy:
      type: RollingUpdate
    db:
      type: postgres
    extraConfig:
      011-orc: |
        c.JupyterHub.redirect_to_server = False
        if "cookie_options" in c.JupyterHub.tornado_settings:
          c.JupyterHub.tornado_settings["cookie_options"].update({"secure": True})
        else:
          c.JupyterHub.tornado_settings["cookie_options"] = dict(secure=True)
      021-templates: |
        c.JupyterHub.template_paths = ['/srv/jhub_custom_templates']
        context = {
            'staging': staging,
            'production': production,
            'version': 'beta',
            'home_url': '/',
            'gesishub_url': '/hub/',
            'gesisbinder_url': '/binder/',
            'about_url': '/about/',
            'tou_url': '/terms_of_use/',
            'imprint_url': 'https://www.gesis.org/en/institute/imprint/',
            'data_protection_url': 'https://www.gesis.org/en/institute/data-protection/',
            'gesis_url': 'https://www.gesis.org/en/home/',
            'gallery_url': '/gallery/'
            # 'help_url': 'https://www.gesis.org/en/help/',
        }
        context.update({'active': 'hub'})
        c.JupyterHub.template_vars = context
      03-admin_handler: |
        from jupyterhub.handlers.base import BaseHandler
        from jupyterhub.utils import admin_only
        from jupyterhub import orm
        class OrcAdminHandler(BaseHandler):
          """Render the admin page."""
          @admin_only
          async def get(self):
              available = {'name', 'admin', 'running', 'last_activity'}
              default_sort = ['last_activity']
              mapping = {
                  'running': orm.Spawner.server_id,
              }
              for name in available:
                  if name not in mapping:
                      mapping[name] = getattr(orm.User, name)

              default_order = {
                  'name': 'asc',
                  'last_activity': 'desc',
                  'admin': 'desc',
                  'running': 'desc',
              }

              sorts = self.get_arguments('sort') or default_sort
              orders = self.get_arguments('order')

              for bad in set(sorts).difference(available):
                  self.log.warning("ignoring invalid sort: %r", bad)
                  sorts.remove(bad)
              for bad in set(orders).difference({'asc', 'desc'}):
                  self.log.warning("ignoring invalid order: %r", bad)
                  orders.remove(bad)

              # add default sort as secondary
              for s in default_sort:
                  if s not in sorts:
                      sorts.append(s)
              if len(orders) < len(sorts):
                  for col in sorts[len(orders):]:
                      orders.append(default_order[col])
              else:
                  orders = orders[:len(sorts)]

              # this could be one incomprehensible nested list comprehension
              # get User columns
              cols = [ mapping[c] for c in sorts ]
              # get User.col.desc() order objects
              ordered = [ getattr(c, o)() for c, o in zip(cols, orders) ]

              users = self.db.query(orm.User).outerjoin(orm.Spawner).order_by(*ordered)
              users = [ self._user_from_orm(u) for u in users ]
              running = [ u for u in users if u.running ]
              for user in users:
                  auth_state = await user.get_auth_state()
                  auth_state = auth_state or {}
                  setattr(user, 'gn', auth_state.get('Givenname', ''))
                  setattr(user, 'sn', auth_state.get('sn', ''))

              html = self.render_template('admin.html',
                  user=self.get_current_user(),
                  admin_access=self.settings.get('admin_access', False),
                  users=users,
                  running=running,
                  sort={s:o for s,o in zip(sorts, orders)},
              )
              self.finish(html)
        c.JupyterHub.extra_handlers = [(r'/admin_orc', OrcAdminHandler),]
      04-keycloak: |
        from urllib.parse import urlencode
        from jupyterhub.handlers import LogoutHandler
        # this handler is copied from
        # https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/886#issuecomment-470869625
        # https://github.com/InfuseAI/primehub/blob/master/helm/primehub/jupyterhub_primehub.py
        class KeycloakLogoutHandler(LogoutHandler):
            kc_logout_url = 'https://login{}.gesis.org/realms/gesis/protocol/openid-connect/logout'.format('-test' if staging else '')
            site_url = 'https://notebooks{}.gesis.org'.format('-test' if staging else '')

            def get(self):
                # redirect to keycloak logout url and redirect back with kc=true parameters
                # then proceed with the original logout method.
                logout_kc = self.get_argument('kc', '')
                if logout_kc != 'true':
                    logout_url = self.request.full_url() + '?kc=true'
                    if not logout_url.startswith('https'):
                      logout_url = logout_url.replace('http', 'https', 1)
                    self.redirect(self.kc_logout_url + '?' + urlencode({'redirect_uri': logout_url}))
                else:
                    #super().get()
                    user = self.get_current_user()
                    if user:
                        self.log.info("User logged out: %s", user.name)
                        self.clear_login_cookie()
                        self.statsd.incr('logout')
                    self.redirect(self.site_url, permanent=False)

        from oauthenticator.generic import GenericOAuthenticator
        GenericOAuthenticator.logout_handler = KeycloakLogoutHandler
        def get_handlers(self, app):
            return [(r'/oauth_login', self.login_handler),
                    (r'/oauth_callback', self.callback_handler),
                    ] + [(r'/logout', self.logout_handler)]
        GenericOAuthenticator.get_handlers = get_handlers
        GenericOAuthenticator.auto_login = True

  proxy:
    https:
      enabled: false
    service:
      type: NodePort

  auth:
    # https://zero-to-jupyterhub.readthedocs.io/en/latest/authentication.html#openid-connect
    type: custom
    custom:
      className: oauthenticator.generic.GenericOAuthenticator
      config:
        userdata_method: GET
        userdata_params: {'state': 'state'}
        username_key: preferred_username
    admin:
      access: true
      users: ['kenan.erdogan@gesis.org', 'arnim.bleier@gesis.org']
    state:
      enabled: true

  singleuser:
    nodeSelector:
      user: workers
    storage:
      extraVolumes:
        - name: etc-jupyter
          configMap:
            name: user-etc-jupyter
      extraVolumeMounts:
        - name: etc-jupyter
          mountPath: /etc/jupyter
    image:
      name: gesiscss/singleuser-orc
      tag: "r2d-394ccfb"

  prePuller:
    hook:
      enabled: true
    continuous:
      enabled: true

  cull:
    # kill user pods if idle for 30 mins - default is 1 hour
    every: 660
    timeout: 1800
    # maxAge is 6 hours: 6 * 3600 = 21600
    maxAge: 21600

