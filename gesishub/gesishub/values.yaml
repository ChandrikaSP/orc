etcJupyter:
  jupyter_notebook_config.json:
    NotebookApp:
      allow_origin: '*'
      tornado_settings:
        trust_xheaders: true
      # shutdown the server after no activity
      shutdown_no_activity_timeout: 1800

    # if a user leaves a notebook with a running kernel,
    # the effective idle timeout will typically be CULL_TIMEOUT + CULL_KERNEL_TIMEOUT
    # as culling the kernel will register activity,
    # resetting the no_activity timer for the server as a whole
    # Check also jupyterhub.cull.timeout config
    MappingKernelManager:
      # shutdown kernels after no activity
      cull_idle_timeout: 1800
      # check for idle kernels this often
      cull_interval: 60
      # a kernel with open connections but no activity still counts as idle
      # this is what allows us to shutdown servers
      # when people leave a notebook open and wander off
      cull_connected: true

jupyterhub:
  hub:
    pdb:
      minAvailable: 0
    nodeSelector:
      base: worker  # where database is
    db:
      type: postgres
    extraVolumes:
      - name: hub-templates
        configMap:
          name: hub-templates
      - name: hub-templates-gesis
        configMap:
          name: hub-templates-gesis
      - name: hub-extra-config
        configMap:
          name: hub-extra-config
    extraVolumeMounts:
      - name: hub-templates
        mountPath: /etc/jupyterhub/templates
      - name: hub-templates-gesis
        mountPath: /etc/jupyterhub/templates/gesis
      - mountPath: /etc/jupyterhub/extra_config.py  # mount where jupyterhub_config.py is, we import it there.
        subPath: extra_config.py
        name: hub-extra-config
    authenticatePrometheus: false
    redirectToServer: false
    shutdownOnLogout: true
    templateVars:
      version: beta
      home_url: /
      gesishub_url: /hub/
      gesisbinder_url: /binder/
      about_url: /about/
      tou_url: /terms_of_use/
      imprint_url: https://www.gesis.org/en/institute/imprint/
      data_protection_url: https://www.gesis.org/en/institute/data-protection/
      gesis_url: https://www.gesis.org/en/home/
      gallery_url: /gallery/
      #help_url: https://www.gesis.org/en/help/
      active: hub
    templatePaths:
      - "/etc/jupyterhub/templates"
    extraConfig:
      01-orc: |
        if "cookie_options" in c.JupyterHub.tornado_settings:
          c.JupyterHub.tornado_settings["cookie_options"].update({"secure": True})
        else:
          c.JupyterHub.tornado_settings["cookie_options"] = dict(secure=True)

        from extra_config import OrcAdminHandler
        c.JupyterHub.extra_handlers = [(r'/admin_orc', OrcAdminHandler),]

        from orc import KeycloakLogoutHandler
        from oauthenticator.generic import GenericOAuthenticator
        GenericOAuthenticator.logout_handler = KeycloakLogoutHandler
        def get_handlers(self, app):
            return [
                (r'/oauth_login', self.login_handler),
                (r'/oauth_callback', self.callback_handler),
            ] + [(r'/logout', self.logout_handler)]
        GenericOAuthenticator.get_handlers = get_handlers

  proxy:
    pdb:
      minAvailable: 0
    https:
      enabled: false
    service:
      type: NodePort

  auth:
    # https://zero-to-jupyterhub.readthedocs.io/en/latest/authentication.html#openid-connect
    type: custom
    custom:
      className: oauthenticator.generic.GenericOAuthenticator
      config:
        auto_login: true
        userdata_method: GET
        userdata_params: {'state': 'state'}
        username_key: preferred_username
    admin:
      users:
        - kenan.erdogan@gesis.org
        - arnim.bleier@gesis.org
    state:
      enabled: true

  singleuser:
    nodeSelector:
      user: worker
    storage:
      extraVolumes:
        - name: etc-jupyter
          configMap:
            name: user-etc-jupyter
      extraVolumeMounts:
        - name: etc-jupyter
          mountPath: /etc/jupyter
    image:
      name: gesiscss/singleuser-orc
      tag: "r2d-dd93b3e"

  scheduling:
    userScheduler:
      enabled: false
    podPriority:
      enabled: false
    userPlaceholder:
      enabled: false

  cull:
    # kill user pods if idle for 30 mins - default is 1 hour
    every: 660
    timeout: 1800
    # maxAge is 6 hours: 6 * 3600 = 21600
    maxAge: 21600
