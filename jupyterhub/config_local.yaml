hub:
  baseUrl: /jupyter/
  image:
    name: gesiscss/k8s-hub-orc-test
    tag: local-7393ec8
#    tag: local-7393ec8-templates
  deploymentStrategy:
    type: RollingUpdate
  db:
    type: postgres
  extraConfig: |
    c.Authenticator.shibboleth_logout_url = 'https://notebooks.gesis.org/Shibboleth.sso/Logout?return=https://notebooks.gesis.org/'
    c.JupyterHub.redirect_to_server = False
    c.JupyterHub.bind_url = 'http://192.168.99.100:31213/jupyter/'
    c.JupyterHub.template_paths = ['/srv/jhub_custom_templates']
    c.JupyterHub.template_vars = {'is_staging': True, 'is_production': False}

    from jupyterhub.handlers.base import BaseHandler
    from jupyterhub.utils import admin_only
    from jupyterhub import orm
    class OrcAdminHandler(BaseHandler):
      """Render the admin page."""
      @admin_only
      async def get(self):
          available = {'name', 'admin', 'running', 'last_activity'}
          default_sort = ['last_activity']
          mapping = {
              'running': orm.Spawner.server_id,
          }
          for name in available:
              if name not in mapping:
                  mapping[name] = getattr(orm.User, name)

          default_order = {
              'name': 'asc',
              'last_activity': 'desc',
              'admin': 'desc',
              'running': 'desc',
          }

          sorts = self.get_arguments('sort') or default_sort
          orders = self.get_arguments('order')

          for bad in set(sorts).difference(available):
              self.log.warning("ignoring invalid sort: %r", bad)
              sorts.remove(bad)
          for bad in set(orders).difference({'asc', 'desc'}):
              self.log.warning("ignoring invalid order: %r", bad)
              orders.remove(bad)

          # add default sort as secondary
          for s in default_sort:
              if s not in sorts:
                  sorts.append(s)
          if len(orders) < len(sorts):
              for col in sorts[len(orders):]:
                  orders.append(default_order[col])
          else:
              orders = orders[:len(sorts)]

          # this could be one incomprehensible nested list comprehension
          # get User columns
          cols = [ mapping[c] for c in sorts ]
          # get User.col.desc() order objects
          ordered = [ getattr(c, o)() for c, o in zip(cols, orders) ]

          users = self.db.query(orm.User).outerjoin(orm.Spawner).order_by(*ordered)
          users = [ self._user_from_orm(u) for u in users ]
          running = [ u for u in users if u.running ]
          for user in users:
              auth_state = await user.get_auth_state()
              auth_state = auth_state or {}
              setattr(user, 'gn', auth_state.get('Givenname', ''))
              setattr(user, 'sn', auth_state.get('sn', ''))

          html = self.render_template('admin.html',
              user=self.get_current_user(),
              admin_access=self.settings.get('admin_access', False),
              users=users,
              running=running,
              sort={s:o for s,o in zip(sorts, orders)},
          )
          self.finish(html)
    c.JupyterHub.extra_handlers = [(r'/admin_orc', OrcAdminHandler),]
  resources:
    requests:
      cpu: 0.2
      memory: 256Mi
proxy:
  https:
    enabled: false
  service:
    type: NodePort
    nodePorts:
      http: 31213
  chp:
    resources:
      requests:
        cpu: 0.2
        memory: 256Mi
auth:
  type: custom
  custom:
    className: "jhub_shibboleth_auth.shibboleth_auth.ShibbolethAuthenticator"
  admin:
    access: true
    users: ['kenan.erdogan@gesis.org', 'arnim.bleier@gesis.org']
  state:
    enabled: true

singleuser:
  storage:
    type: none
    capacity: 10Gi
  image:
#    name: gesiscss/singleuser-orc
#    tag:
    name: jupyterhub/k8s-singleuser-sample
    tag: f8dec3f
  cpu:
    limit:
    guarantee:
  memory:
    limit: 512M
    guarantee: null
  extraEnv:
    IS_STAGING: true
    IS_PRODUCTION: false

prePuller:
  hook:
    enabled: false

#rbac:
#  enabled: false